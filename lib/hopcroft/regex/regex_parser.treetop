module Hopcroft
  module Regex
    grammar TreetopRegex do
      rule a_regex do
        expr_with_parens / expr_without_parens
      end

      rule expr_with_parens do
        "(" expr_with_parens ")" {
          def eval
            expr_with_parens.eval
          end
        }
        /
        expr_without_parens
      end

      rule expr_without_parens
        multi_valued_expression
      end

      rule multi_valued_expression do
        car:single_value_expression cdr:single_value_expression* {
          def eval
            if cdr.elements.any?
              a = [car.eval, cdr.elements.map { |element| element.eval }]
              a.flatten!
              a.inject { |collection, element| collection + element }
            else
              car.eval
            end
          end
        }
      end

      rule single_value_expression
        escaped_char / expr_without_escaping
      end

      rule expr_without_escaping do
        kleen_star / expr_without_kleen_star
      end

      rule expr_without_kleen_star do
        alternation / expr_without_alternation
      end

      rule expr_without_alternation do
        plus_expr / expr_without_plus
      end

      rule expr_without_plus do
        optional_expr / expr_without_optional_expr
      end

      rule expr_without_optional_expr do
        char_class / dot / char
      end

      rule alternation do
        one:expr_without_alternation "|" two:expr_without_alternation {
          def eval
            Alternation.new(one.eval, two.eval)
          end
        }
      end

      rule plus_expr do
        expr_without_plus "+" {
          def eval
            Plus.new(expr_without_plus.eval)
          end
        }
      end

      rule optional_expr do
        expr_without_optional_expr "?" {
          def eval
            OptionalSymbol.new(expr_without_optional_expr.eval)
          end
        }
      end

      rule char_class do
        "[" char_class_expr "]" {
          def eval
            CharacterClass.new(char_class_expr.text_value)
          end
        }
      end

      rule char_class_expr do
        char_text_value "-" char_text_value
      end

      rule kleen_star do
        expr_without_kleen_star "*" {
          def eval
            KleenStar.new(expr_without_kleen_star.eval)
          end
        }
      end

      rule dot do
        "." {
          def eval
            Dot.new
          end
        }
      end

      rule char do
        char_text_value {
          def eval
            Char.new(text_value)
          end
        }
      end

      rule char_text_value do
        escape_char any_char / non_special_char
      end

      rule escaped_char do
        escape_char any_char {
          def eval
            Char.new(any_char.text_value)
          end
        }
      end

      rule non_special_char do
        !("(" / ")") .
      end

      rule any_char do
        .
      end

      rule escape_char do
        "\\"
      end
    end
  end
end
